type Greet {
  msg: String!
  name: String!
}

type Mutation {
  addResult(resultinput: ResultInput!): Result!
  changeName(name: String!): Greet!
}

type Query {
  greet: Greet!
  ranking: [Result!]
  results: [Result!]
  target: Target!
}

type Result {
  score: Float!
  target: Target!
  user: User!
}

input ResultInput {
  score: Float!
  target: TargetInput!
  user: UserInput!
}

type Target {
  angle: Float!
  trigFunc: TrigFunc
}

input TargetInput {
  angle: Float!
  target: TrigFuncInput
}

type TrigFunc {
  calcCos: Float!
  calcTan: Float!
  calcsin: Float!
  cos: String!
  sin: String!
  tan: String!
}

input TrigFuncInput {
  calcCos: Float!
  calcTan: Float!
  calcsin: Float!
  cos: String!
  sin: String!
  tan: String!
}

type User {
  name: String!
}

input UserInput {
  name: String!
}
